<?php

namespace App\Repositories\{{importNameSpace}}\Form;

use App\Http\Requests\{{importNameSpace}}\Form\ValidateUpdate{{formUp}};
use App\Models\{{modelUp}};
use App\Repositories\BaseRepository;
use App\Traits\BaseTrait;
use Carbon\Carbon;
use DataTables;
use Illuminate\Support\Facades\Validator;
use Illuminate\Http\JsonResponse;
class  {{formUp}}FormRepository extends BaseRepository implements I{{formUp}}FormRepository {

    use BaseTrait;
    public function __construct() {
        $this->LoadModels(['{{modelUp}}']);
    }

    /**
     * Get the page default resource
     *
     * @param Request $request
     * @param integer|string $id
     * @return array
     */
    public function index($request) : array
    {
       return $this->getPageDefault(model: $this->{{modelUp}}, id: $id);
    }

    /**
     * Store resource
     *
     * @param Request  $request
     * @return JsonResponse
     */
    public function store($request) : JsonResponse
    {
        try {
            {{modelUp}}::create([
                ...$request->all(),
                //'serial' => $this->facSrWc($this->{{formUp}})
            ]);
            $response['extraData'] = ['inflate' => pxLang($request->lang,'','common.action_success') ];
            return $this->response(['type' => 'success', 'data' => $response]);
        } catch (\Exception $e) {
            $this->saveError($this->getSystemError(['name' => '{{modelUp}}_store_error']), $e);
            return $this->response(['type' => 'noUpdate', 'title' => pxLang($request->lang,'','common.server_wrong')]);
        }
    }
}