<?php

namespace App\Repositories\{{nameUp}}\System\User\Policy;

use App\Models\{{model}};
use App\Models\{{model}}Permission;
use App\Models\{{model}}Role;
use App\Repositories\BaseRepository;
use App\Traits\BaseTrait;
use Illuminate\Http\JsonResponse;

class {{model}}PolicyRepository extends BaseRepository implements I{{model}}PolicyRepository {

    use BaseTrait;
    /**
     * View user policy view
     *
     * @param Request $request
     * @return array
     */
    public function index($request) : array
    {
        $data['availableUser'] = {{model}}Role::select(['code','name'])->whereNotIn('code',['SA'])->get();
        $data['systePolicies'] = $this->systemPolicies();
        $this->firstOrCreate($this->getFirstOrCreate($data['systePolicies'],$data['availableUser']));
        $data['permissions'] = {{model}}Permission::select(['id','slug','user_access'])->get();
        return $data;
    }

    /**
     * Update current user policy
     *
     * @param Request $request
     * @return JsonResponse
     */
    public function update($request) : JsonResponse
    {
        $i = {{model}}Permission::whereIn('id',$request->slug)->select(['id','user_access'])->get();;
        $dirty = [];
        if (count($i) > 0) {
            foreach ($i as $key => $value) {
                $value->user_access =  (isset($request->user_access[$value->id])) ? $request->user_access[$value->id] : NULL;
                if ($value->isDirty()) {
                    $dirty[$key] = "yes";
                }
            }
            if (count($dirty) > 0) {
                foreach ($i as $key => $value) {
                    $value->save();
                }
                $data['extraData'] = [
                    "inflate" =>  pxLang($request->lang,'','common.action_success')
                ];
                return $this->response(['type' => 'success','data' => $data]);
            } else {
                return $this->response(['type' => 'noUpdate', 'title' =>  '<span class="text-success"> '.pxLang($request->lang,'','common.no_change').' </span>']);
            }

        } else {
            return $this->response(['type' => 'noUpdate', 'title' => '<span class="text-success"> '.pxLang($request->lang,'','common.no_change').' </span>']);
        }
    }

    /**
     * List out user policies to be installed
     *
     * @param array $policies
     * @param array $users
     * @return array
     */
    private function getFirstOrCreate($policies,$users) : array
    {
        $data = [];
        foreach ($policies as $systemPolicy) {
            foreach ($systemPolicy['policies'] as $moduelPolicy) {
                foreach ($moduelPolicy['policies'] as $actionPolicy){
                    foreach ($actionPolicy['keys'] as $action){
                        $uniqueKey = getPolicyKey(\Str::class,$actionPolicy['name'].'_'.$action);
                        $data[] = [
                            "slug" => $uniqueKey
                        ];
                    }
                }
            }
        }
        return $data;
    }

    /**
     * Found or create role
     *
     * @param array $permissions
     * @return void
     */
    private function firstOrCreate($permissions) : void
    {
        foreach ($permissions as $perm) {
            {{model}}Permission::firstOrCreate(
                ['slug' => $perm['slug']],
            );
        }
    }
}
